@startuml Enhanced Document Request Flow
actor User
participant "Frontend Wizard" as FE
participant "API Service" as API
participant "Document Controller" as DC
participant "OCR Extractor" as OCR
participant "Database" as DB
participant "Notification Service" as NS
participant "Admin Dashboard" as AD
actor Admin

== Request Initiation ==
User -> FE : Start Document Request Wizard
FE -> User : Display Step 1: Document Type & Purpose

User -> FE : Select document type, purpose, priority
FE -> User : Display Step 2: Upload Documents

User -> FE : Upload supporting documents
FE -> OCR : Send files for extraction
OCR -> FE : Return extracted data with fields
FE -> User : Display Step 3: Personal Info (auto-filled)

User -> FE : Review/edit auto-filled data
FE -> User : Display Step 4: Educational Info

User -> FE : Complete educational information
FE -> User : Display Step 5: Review & Submit

User -> FE : Confirm and submit request
FE -> API : POST /api/documents/request (with files)

== Backend Processing ==
API -> DC : Process request with files
DC -> OCR : Extract data from uploaded files
OCR -> DC : Return extracted fields
DC -> DB : Create DocumentRequest with:\n- Extracted data\n- Processing steps\n- Estimated completion date
DB -> DC : Return saved request
DC -> NS : Notify admins of new request
NS -> Admin : Send email notification
DC -> API : Return success with request details
API -> FE : Display success message
FE -> User : Show request confirmation

== Real-time Updates ==
loop Every 30 seconds (if auto-refresh enabled)
  FE -> API : GET /api/documents/my-requests
  API -> DC : Fetch user requests
  DC -> DB : Query user's requests
  DB -> DC : Return requests with status
  DC -> API : Return requests data
  API -> FE : Update UI with latest status
end

== Admin Review & Processing ==
Admin -> AD : Access Enhanced Document Dashboard
AD -> API : GET /api/documents/filtered-requests
API -> DC : Get filtered requests with analytics
DC -> DB : Query with filters and pagination
DB -> DC : Return filtered results
DC -> API : Return requests + analytics
API -> AD : Display dashboard with:\n- Status overview cards\n- Processing progress\n- Overdue alerts\n- Filterable request table

Admin -> AD : Select multiple requests for bulk action
AD -> API : PATCH /api/documents/bulk-update
API -> DC : Update multiple requests
DC -> DB : Update request statuses
DC -> NS : Send notifications for each status change
loop For each updated request
  NS -> User : Send status change email
end
DC -> API : Return bulk update results
API -> AD : Show success confirmation

== Individual Request Processing ==
Admin -> AD : Update processing step
AD -> API : PATCH /api/documents/request/{id}/processing-step
API -> DC : Update specific processing step
DC -> DB : Update processing step status
DC -> NS : Send processing step notification
NS -> User : Send email about step completion
DC -> API : Return updated request
API -> AD : Update dashboard

== Completion & Delivery ==
Admin -> AD : Mark request as completed
AD -> API : PATCH /api/documents/request/{id}/status
API -> DC : Update status to 'completed'
DC -> DB : Set completion date, auto-archive
DC -> NS : Send completion notification
NS -> User : Send completion email with download link
DC -> API : Return completed request
API -> AD : Update dashboard

User -> FE : Check request status
FE -> User : Show completed status with download option
User -> FE : Download document
FE -> User : Provide generated PDF document

== Automated Monitoring ==
loop Daily (via cron job)
  activate "Overdue Check Script"
  "Overdue Check Script" -> DB : Find overdue requests
  DB -> "Overdue Check Script" : Return overdue list
  "Overdue Check Script" -> NS : Send overdue notifications
  NS -> Admin : Email overdue request alerts
  "Overdue Check Script" -> DB : Update priority to 'high'
  deactivate "Overdue Check Script"
end

@enduml
